{"version":3,"sources":["components/common/Heading/Heading.tsx","components/common/Table/Table.tsx","components/Logs/constants/logConstants.ts","components/Logs/components/LogTable/LogTable.tsx","components/common/StatsCard/StatsCard.tsx","components/Logs/components/LogStats/LogStats.tsx","services/api/apiService.ts","components/Logs/services/logsService.ts","components/common/Pagination/components/PaginationInfo/PaginationInfo.tsx","components/common/IconButton/IconButton.tsx","components/common/Pagination/components/PaginationNav/PaginationNav.tsx","components/common/Pagination/Pagination.tsx","components/Logs/Logs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["memo","headingLevel","testid","className","children","Title","data-testid","columns","data","id","Object","keys","map","key","style","width","name","record","index","logInitialState","logs","pagination","count","offset","limit","total","counter","INFO","WARNING","ERROR","logColumns","timeStamp","type","message","logType","logTypesMap","icon","lightColor","darkColor","backgroundColor","stats","APIR","Axios","create","baseURL","process","defaults","headers","post","logsService","pulseLogs","frequencySeconds","interval","pipe","switchMap","getLogs","get","params","tap","console","log","Date","response","requestFrequencyMS","pageInformation","toFixed","disabled","onClick","onClickFirst","onClickPrior","onClickNext","onClickLast","isFirstRecord","isLastRecord","faAngleDoubleLeft","faAngleLeft","faAngleRight","faAngleDoubleRight","testId","onPageChanged","getLastPagination","handlePagination","paginated","protectLowerPage","protectHigherPage","Logs","useState","logResponse","setLogResponse","setPageInformation","setOffset","updateLogState","useCallback","useEffect","subscribe","subscription","unsubscribe","paginationInformation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.36d66568.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\n\r\n// Styles\r\nimport './Heading.scss';\r\n\r\ninterface HeadingProps {\r\n  headingLevel?: 'h1' | 'h2' | 'h3';\r\n  className?: string;\r\n  testid?: string;\r\n  children: React.ReactNodeArray | React.ReactNode;\r\n}\r\n\r\nconst Heading : React.SFC<HeadingProps> = ({\r\n  headingLevel = 'h1', \r\n  testid = '',\r\n  className,\r\n  children\r\n}) => {\r\n  const Title = headingLevel;\r\n\r\n  return (\r\n    <div \r\n      className={className ? className : 'heading'}\r\n      data-testid={testid}\r\n    >\r\n      <Title>{children}</Title>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Heading);","import React, { memo } from 'react';\r\n\r\n// Own\r\nimport { Dictionary } from '../../../interfaces/generalInterfaces';\r\nimport { TableColumns } from './interfaces/tableInterfaces';\r\n\r\n// Styles\r\nimport './Table.scss';\r\n\r\ninterface TableProps {\r\n  id?: string;\r\n  columns: TableColumns;\r\n  data: Dictionary[];\r\n}\r\n\r\nconst Table: React.SFC<TableProps> = ({\r\n  columns,\r\n  data,\r\n  id = 'table'\r\n}) => {\r\n  return (\r\n    <table \r\n      data-testid=\"table\" \r\n      id={id}>\r\n      <thead>\r\n        <tr>\r\n          {Object.keys(columns).map(key =>\r\n            <td \r\n              key={key} \r\n              style={{ width: columns[key].width }}\r\n            >\r\n              {columns[key].name}\r\n            </td>\r\n          )}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map((record, index) =>\r\n          <tr key={index}>\r\n            {Object.keys(record).map(key => (\r\n              <td key={key}>\r\n                {record[key]}\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default memo(Table);\r\n\r\n","import { LogsResponse } from \"../interfaces/logsStateInterfaces\";\r\nimport { TableColumns } from \"../../common/Table/interfaces/tableInterfaces\";\r\nimport * as icon from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport const logLimit = 20;\r\n\r\nexport const counterInitialState = {\r\n  INFO: 0,\r\n  WARNING: 0,\r\n  ERROR: 0\r\n};\r\n\r\nexport const paginationInitialState = {\r\n  count: 0,\r\n  offset: 0,\r\n  limit: logLimit,\r\n  total: 0\r\n};\r\n\r\nexport const logInitialState: LogsResponse = {\r\n  logs: [],\r\n  pagination: paginationInitialState,\r\n  counter: counterInitialState\r\n};\r\n\r\nexport const logColumns: TableColumns = {\r\n  timeStamp: {\r\n    name: 'Date Time',\r\n    width: 200\r\n  },\r\n  type: {\r\n    name: 'Type',\r\n    width: 130\r\n  },\r\n  message: {\r\n    name: 'Message'\r\n  }\r\n};\r\n\r\nexport const logType = {\r\n  INFO: 'INFO',\r\n  WARNING: 'WARNING',\r\n  ERROR: 'ERROR'\r\n}\r\n\r\nexport const logTypesMap = {\r\n  [logType.INFO]: {\r\n    name: 'Information',\r\n    icon: icon.faInfoCircle,\r\n    lightColor: \"#93abe4\", \r\n    darkColor: \"#2758C9\"\r\n  },\r\n  [logType.WARNING]: {\r\n    name: 'Warning',\r\n    icon: icon.faExclamationTriangle,\r\n    lightColor: \"#C28EE0\", \r\n    darkColor: \"#861EC2\"\r\n  },\r\n  [logType.ERROR]: {\r\n    name: 'Error',\r\n    icon: icon.faPlaneArrival,\r\n    lightColor: \"#E08E8E\", \r\n    darkColor: \"#C21E1E\"\r\n  },  \r\n}\r\n\r\n","import React, { memo } from 'react';\r\n\r\n// Own\r\nimport { Heading } from '../../../common/Heading';\r\nimport { Table } from '../../../common/Table';\r\nimport { logColumns } from '../../constants/logConstants';\r\nimport { Logs } from '../../interfaces/logsStateInterfaces';\r\n\r\n// Styles\r\nimport './LogTable.scss';\r\n\r\ninterface LogTableProps {\r\n  logs: Logs[];\r\n}\r\n\r\nconst LogTable: React.SFC<LogTableProps> = ({ logs }) => {\r\n  return (\r\n    <div data-testid=\"log-table-container\" id=\"logTable\">\r\n      <Heading>Logs</Heading>\r\n      <Table columns={logColumns} data={logs} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(LogTable);","import React, { memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n// Styles\r\nimport './StatsCard.scss';\r\n\r\ninterface StatsCardProps {\r\n  name: string;\r\n  count: number;\r\n  darkColor: string;\r\n  lightColor: string;\r\n  icon: any;\r\n}\r\n\r\nconst StatsCard: React.SFC<StatsCardProps> = ({\r\n  name,\r\n  count,\r\n  darkColor,\r\n  lightColor,\r\n  icon\r\n}) => {\r\n  return (\r\n    <div \r\n      data-testid=\"stats-card\"\r\n      className=\"stats-card\"\r\n      style={{backgroundColor: darkColor}}\r\n    >\r\n      <div className=\"stats-card__icon\">\r\n        <FontAwesomeIcon icon={icon} />\r\n      </div>\r\n      <div \r\n        data-testid=\"stats-card-text\"\r\n        className=\"stats-card__text\" \r\n        style={{backgroundColor: lightColor}}\r\n      >\r\n        <div className=\"stats-card__count\">\r\n          {count}\r\n        </div>\r\n        <div className=\"stats-card__type\">\r\n          {name}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(StatsCard);","import React, { memo } from 'react';\r\n\r\n// Own\r\nimport { Heading } from '../../../common/Heading';\r\nimport { StatsCard } from '../../../common/StatsCard';\r\nimport { logTypesMap, logType } from '../../constants//logConstants';\r\n\r\n// Styles\r\nimport './LogStats.scss';\r\nimport { Counter } from '../../interfaces/logsStateInterfaces';\r\n\r\ninterface LogStatsProps {\r\n  stats: Counter;\r\n}\r\n\r\nconst LogStats: React.SFC<LogStatsProps> = ({stats}) => {\r\n  const title = 'Statistics';\r\n\r\n  return (\r\n    <>\r\n      <Heading>{title}</Heading>\r\n      <div data-testid=\"log-stats-container\" className=\"log-stats\">\r\n        {Object.keys(logType).map(key => (\r\n          <StatsCard \r\n            key={key}\r\n            {...logTypesMap[key]} \r\n            count={stats[key]} \r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(LogStats);","import Axios from \"axios-observable\";\r\n\r\nexport const APIR = Axios.create({\r\n  baseURL: `${process.env.REACT_APP_API_URL}api/`,\r\n});\r\n\r\nAPIR.defaults.headers.post[\"Content-Type\"] = \"application/json;charset=utf-8\";\r\n","import { map, tap, switchMap } from \"rxjs/operators\";\r\nimport { interval } from 'rxjs';\r\nimport { APIR } from \"../../../services/api/apiService\";\r\nimport { LogsResponse } from \"../interfaces/logsStateInterfaces\";\r\nimport { logLimit } from \"../constants/logConstants\";\r\n\r\nconst requestFrequencyMS = 5000; \r\n\r\nconst pulseLogs = (offset: number, frequencySeconds: number) => interval(frequencySeconds).pipe(\r\n  switchMap(() => logsService.getLogs(offset)),\r\n);\r\n\r\nconst getLogs = (offset: number) => APIR.get<LogsResponse>('logs', {\r\n  params: { offset, limit: logLimit }\r\n}).pipe(\r\n  tap(() => console.log(`request made ${new Date()}`)),\r\n  map((response) => response.data)\r\n);\r\n\r\nexport const logsService = {\r\n  pulseLogs,\r\n  getLogs,\r\n  requestFrequencyMS\r\n};","import React, { memo } from 'react';\r\n\r\n// Own\r\nimport { PaginationProperties } from '../../interfaces/paginationInterfaces';\r\n\r\n// Styles\r\nimport './PaginationInfo.scss';\r\n\r\nconst PaginationInfo: React.SFC<PaginationProperties> = ({ pageInformation }) => {\r\n  const getPosition = (): number => pageInformation.offset + pageInformation.count === pageInformation.total \r\n    ? 100 \r\n    : pageInformation.offset / pageInformation.total * 100\r\n\r\n  return (\r\n    <div data-testid=\"pagination-info\" className=\"pagination-info\">\r\n      {pageInformation.total === 0\r\n        ? 'No Logs'\r\n        : `Show ${pageInformation.offset + 1} to ${pageInformation.count + pageInformation.offset}\r\n      of ${pageInformation.total} (${getPosition().toFixed(2)}%)`\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(PaginationInfo);","import React, { memo } from 'react';\r\n\r\n// Styles\r\nimport './IconButton.scss';\r\n\r\ninterface IconButtonProps {\r\n  testid?: string;\r\n  disabled?: boolean;\r\n  onClick: () => void;\r\n  children: React.ReactNode | React.ReactNodeArray;\r\n  className?: string;\r\n}\r\n\r\nconst IconButton: React.SFC<IconButtonProps> = ({\r\n  testid = '',\r\n  disabled,\r\n  children,\r\n  onClick,\r\n  className = ''\r\n}) => {\r\n  return (\r\n    <div\r\n      data-testid={testid}\r\n      className={`icon-button ${disabled ? 'icon-button--disabled': ''} ${className}`}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(IconButton);","import React, { memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faAngleRight,\r\n  faAngleLeft,\r\n  faAngleDoubleRight,\r\n  faAngleDoubleLeft\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\n// Own\r\nimport { PaginationProperties } from '../../interfaces/paginationInterfaces';\r\nimport { IconButton } from '../../../IconButton';\r\n\r\n// Styles\r\nimport './PaginationNav.scss';\r\n\r\nexport interface PaginationInfoProps extends PaginationProperties {\r\n  onClickFirst: () => void;\r\n  onClickPrior: () => void;\r\n  onClickNext: () => void;\r\n  onClickLast: () => void;\r\n}\r\n\r\nconst PaginationNav: React.SFC<PaginationInfoProps> = ({ \r\n  pageInformation,\r\n  onClickFirst,\r\n  onClickPrior,\r\n  onClickNext,\r\n  onClickLast\r\n}) => {\r\n  const isFirstRecord =  (): boolean => pageInformation.offset === 0;\r\n  const isLastRecord =  (): boolean => pageInformation.offset + pageInformation.count >= pageInformation.total;\r\n\r\n  return (\r\n    <div \r\n      data-testid=\"pagination-nav\"\r\n      className=\"pagination-nav\">\r\n      <IconButton \r\n        testid=\"pagination-nav-first\"\r\n        disabled={isFirstRecord()} \r\n        onClick={onClickFirst}\r\n      >\r\n        <FontAwesomeIcon icon={faAngleDoubleLeft} />\r\n      </IconButton>\r\n\r\n      <IconButton\r\n        testid=\"pagination-nav-prior\"\r\n        disabled={isFirstRecord()}\r\n        onClick={onClickPrior}\r\n      >\r\n        <FontAwesomeIcon icon={faAngleLeft} />\r\n      </IconButton>\r\n\r\n      <IconButton \r\n        testid=\"pagination-nav-next\"\r\n        disabled={isLastRecord()}\r\n        onClick={onClickNext}\r\n      >\r\n        <FontAwesomeIcon icon={faAngleRight} />\r\n      </IconButton>\r\n\r\n      <IconButton \r\n        testid=\"pagination-nav-last\"\r\n        disabled={isLastRecord()}\r\n        onClick={onClickLast}\r\n      >\r\n        <FontAwesomeIcon icon={faAngleDoubleRight} />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(PaginationNav);","import React, { memo } from 'react';\r\n\r\n// Own\r\nimport { PaginationInfo } from './components/PaginationInfo';\r\nimport { PaginationNav } from './components/PaginationNav';\r\nimport { PaginationProperties, PageInformation } from './interfaces/paginationInterfaces';\r\n\r\n// Styles\r\nimport './Pagination.scss';\r\n\r\nexport interface PaginationProps extends PaginationProperties {\r\n  testId?: string;\r\n  onPageChanged: (props: PageInformation) => void;\r\n}\r\n\r\nconst Pagination: React.SFC<PaginationProps> = ({ \r\n  pageInformation,\r\n  testId,\r\n  onPageChanged\r\n}) => {\r\n  \r\n  const getLastPagination = () => pageInformation.total - pageInformation.limit;\r\n\r\n  const handlePagination = (paginated: number) => {\r\n    const protectLowerPage = paginated < 0 ? 0 : paginated;\r\n    const protectHigherPage = protectLowerPage > pageInformation.total ? getLastPagination() : protectLowerPage;\r\n    if (protectHigherPage !== pageInformation.offset) {\r\n      onPageChanged({...pageInformation, offset: protectHigherPage});\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div \r\n    data-testid={testId} \r\n    className=\"pagination\">\r\n      <PaginationInfo pageInformation={pageInformation} />\r\n      <PaginationNav \r\n        onClickFirst={() => handlePagination(0)}\r\n        onClickPrior={() => handlePagination(pageInformation.offset - pageInformation.limit)}\r\n        onClickNext={() => handlePagination(pageInformation.offset + pageInformation.limit)}\r\n        onClickLast={() => handlePagination(getLastPagination())}\r\n        pageInformation={pageInformation} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Pagination);","import React, { useState, useEffect, useCallback } from 'react';\r\n\r\n// Own\r\nimport LogTable from './components/LogTable/LogTable';\r\nimport LogStats from './components/LogStats/LogStats';\r\nimport { logInitialState } from './constants/logConstants';\r\nimport { logsService } from './services/logsService';\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport { LogsResponse } from './interfaces/logsStateInterfaces';\r\nimport { PageInformation } from '../common/Pagination/interfaces/paginationInterfaces';\r\n\r\n// Styles\r\nimport './Logs.scss';\r\n\r\nconst Logs: React.SFC = () => {\r\n\r\n  const [logResponse, setLogResponse] = useState(logInitialState);\r\n  const [pageInformation, setPageInformation] = useState(logInitialState.pagination);\r\n  const [offset, setOffset] = useState(0);\r\n\r\n  const updateLogState = useCallback((response: LogsResponse) => {\r\n    setLogResponse(response);\r\n    setPageInformation({ ...response.pagination });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    logsService.getLogs(offset).subscribe(updateLogState);\r\n    const subscription = logsService.pulseLogs(offset, logsService.requestFrequencyMS).subscribe(updateLogState);\r\n    \r\n    return () => {\r\n      subscription.unsubscribe();\r\n    }\r\n  }, [offset, updateLogState]);\r\n\r\n  const handlePageChanged = (paginationInformation: PageInformation) => {\r\n    setOffset(paginationInformation.offset);\r\n  }\r\n\r\n  return (\r\n    <div data-testid=\"logs-container\" id=\"logs\">\r\n      <LogStats stats={logResponse.counter} />\r\n      <LogTable logs={logResponse.logs} />\r\n      <Pagination\r\n        pageInformation={pageInformation}\r\n        onPageChanged={handlePageChanged}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Logs;","import React from 'react';\n\nimport { Logs } from './components/Logs';\n\nfunction App() {\n  return <div data-testid=\"app\">\n    <Logs />\n  </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}